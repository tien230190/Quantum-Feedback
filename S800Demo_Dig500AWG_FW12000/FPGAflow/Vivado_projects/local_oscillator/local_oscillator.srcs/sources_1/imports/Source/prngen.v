/* -*-Verilog-*-
*******************************************************************************
*
* File:         prngen.v
* RCS:          $Header: $
* Description:  PRN Generator from Thunder/Minnow/Matterhorn
* Author:       John Guilford, Keysight
* Created:      Tue Nov 22 15:16:29 2016
* Modified:     Tue Nov 22 15:17:20 2016 (John Guilford) johng@LKSJOHN1
* Language:     Verilog
* Package:      N/A
* Status:       Experimental (Do Not Distribute)
*
* (C) Copyright 2016, Keysight Technologies Inc., all rights reserved.
*
*******************************************************************************
*/

// Module prngen.v
// The purpose of this module is to generate a pseudo-random number sequence
// which is the same as that generated by the titan motherboard.  This way,
// it can be compared with data coming from the motherboard as a diagnostic.
//
// Based on file prn.c by John Guilford
//
// This is a 36-bit generator based on the polynomial 0x801000000.
// The below code implements 32 passes of this generator in one clock cycle,
// thus obtaining 32 brand-new bits of data in one swell foop.  Only
// 24 bits are used, because that's how many bits are in the A/D data path.
//
// To use, make the reset signal true for one or more clock cycles.
// The initial number will then appear at the data outputs.  

`timescale  100 ps / 100 ps
`define DEL 1

module prngen
  (input	 clk,
   input	 rst,
   input 	 ce,
   output [31:0] prndata
   );
   parameter [35:0] PRNINIT = 36'h000001ffc;

   reg [35:0] 	    prn;
   
   assign 	    prndata = prn[31:0];

   always @(posedge clk)
     if (rst)     prn <= #`DEL PRNINIT;
     else if (ce) 
       prn <= #`DEL {prn[23:13],prn[12:0]^prn[23:11],
		     prn[10:0]^prn[35:25],prn[24]};
endmodule // prngen

